Validation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks.

The certificate chain validation includes these steps:

    The certificate is issued by its parent Certificate Authority or the root CA trusted by the system.
    Each CA is allowed to issue certificates.
    Each certificate in the chain is not expired.

It’s not recommended to reinvent the wheel by implementing custom certificate chain validation.

TLS libraries provide built-in certificate validation functions that should be used.
------------------------------------------------
With the advent of HTML5, many old elements were deprecated. To ensure the best user experience, deprecated elements should not be used. This rule checks for the following deprecated elements:
Element 	Remediation Action

basefont, big, blink, center, font, marquee, multicol, nobr, spacer, tt
	

use CSS
---------------------------------------------------------------------
Importing every public name from a module using a wildcard (from mymodule import *) is a bad idea because:

    It could lead to conflicts between names defined locally and the ones imported.
    It reduces code readability as developers will have a hard time knowing where names come from.
    It clutters the local namespace, which makes debugging more difficult.

Remember that imported names can change when you update your dependencies. A wildcard import which works today might be broken tomorrow.

There are two ways to avoid a wildcard import:

    Replace it with import mymodule and access module members as mymodule.myfunction. If the module name is too long, alias it to a shorter name. Example: import pandas as pd
    List every imported name. If necessary import statements can be split on multiple lines using parentheses (preferred solution) or backslashes.

Noncompliant Code Example

from math import *  # Noncompliant
def exp(x):
    pass
print(exp(0))   # "None" will be printed

Compliant Solution

import math
def exp(x):
    pass
print(math.exp(0))   # "1.0" will be printed

Or

from math import exp as m_exp
def exp(x):
    pass
print(m_exp(0))   # "1.0" will be printed

Exceptions

No issue will be raised in __init__.py files. Wildcard imports are a common way of populating these modules.

No issue will be raised in modules doing only imports. Local modules are sometimes created as a proxy for third-party modules.

# file: mylibrary/pyplot.py
try:
    from guiqwt.pyplot import *  # Ok
except Exception:
    from matplotlib.pyplot import *  # Ok

Just keep in mind that wildcard imports might still create issues in these cases. It’s always better to import only what you need.
See

    Python documentation - The import statement
------------------------------------------------------------------------------------------------------------------
There are several reasons for a function or a method not to have a body:

    It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production.
    It is not yet, or never will be, supported. In this case an exception should be thrown.
    The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.

Noncompliant Code Example

def myfunc1(foo="Noncompliant"):
    pass

class MyClass:
    def mymethod1(self, foo="Noncompliant"):
        pass

Compliant Solution

def myfunc1():
    pass  # comment explaining why this function is empty

def myfunc2():
    raise NotImplementedError()

def myfunc3():
    """
    Docstring explaining why this function is empty.
    """

class MyClass:
    def mymethod1(self):
        pass  # comment explaining why this function is empty

    def mymethod2(self):
        raise NotImplementedError()

    def mymethod3(self):
        """
        Docstring explaining why this method is empty. Note that this is not recommended for classes
        which are meant to be subclassed.
        """

Exceptions

No issue will be raised when the empty method is abstract and meant to be overriden in a subclass, i.e. it is decorated with abc.abstractmethod, abc.abstractstaticmethod, abc.abstractclassmethod or abc.abstractproperty. Note however that these methods should normally have a docstring explaining how subclasses should implement these methods.

import abc

class MyAbstractClass(abc.ABC):
    @abc.abstractproperty
    def myproperty(self):
        pass

    @abc.abstractclassmethod
    def myclassmethod(cls):
        pass

    @abc.abstractmethod
    def mymethod(self):
        pass

    @abc.abstractstaticmethod
    def mystaticmethod():
        pass
---------------------------------------------------------------------------------------------------------
PROJECT 2
===========
Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be difficult to maintain.
See

    Cognitive Complexity
---------------------------------------
AWS Identity and Access Management (IAM) is the service that defines access to AWS resources. One of the core components of IAM is the policy which, when attached to an identity or a resource, defines its permissions. Policies granting permission to an Identity (a User, a Group or Role) are called identity-based policies. They add the ability to an identity to perform a predefined set of actions on a list of resources.

Here is an example of a policy document defining a limited set of permission that grants a user the ability to manage his own access keys.

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "iam:CreateAccessKey",
                "iam:DeleteAccessKey",
                "iam:ListAccessKeys",
                "iam:UpdateAccessKey"
            ],
            "Resource": "arn:aws:iam::245500951992:user/${aws:username}",
            "Effect": "Allow",
            "Sid": "AllowManageOwnAccessKeys"
        }
    ]
}

Privilege escalation generally happens when an identity policy gives to an identity the ability to grant more privileges than the ones it already has. Here is another example of a policy document that hides a privilege escalation. It allows an identity to generate a new access key for any user from the account, including users with high privileges.

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "iam:CreateAccessKey",
                "iam:DeleteAccessKey",
                "iam:ListAccessKeys",
                "iam:UpdateAccessKey"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "AllowManageOwnAccessKeys"
        }
    ]
}

Although it looks like it grants a limited set of permissions, this policy would, in practice, give the highest privileges to the identity it’s attached to.

Privilege escalation is a serious issue as it allows a malicious user to easily escalate to a high privilege identity from a low privilege identity it took control of.

The example above is just one of many permission escalation vectors. Here is the list of vectors that the rule can detect:
Vector name 	Summary

Create Policy Version
	

Create new IAM policy and set it as default

Set Default Policy Version
	

Set a different IAM policy version as default

Create AccessKey
	

Create a new access key for any user

Create Login Profile
	

Create an access with a chosen password

Update Login Profile
	

Update the existing password

Attach User Policy
	

Attach a permissive IAM policy like "AdministratorAccess" to a user the attacker controls

Attach Group Policy
	

Attach a permissive IAM policy like "AdministratorAccess" to a group containing a user the attacker controls

Attach Role Policy
	

Attach a permissive IAM policy like "AdministratorAccess" to a role that can be assumed by the user the attacker controls

Put User Policy
	

Alter the existing inline IAM policy from a user the attacker controls

Put Group Policy
	

Alter the existing inline IAM policy from a group containing a user that the attacker controls

Put Role Policy
	

Alter an existing inline IAM role policy. The rule will then be assumed by the user that the attacker controls

Add User to Group
	

Add a user that the attacker controls to a group that has a larger range of permissions

Update Assume Role Policy
	

Update a role’s "AssumeRolePolicyDocument" to allow a user the attacker controls to assume it

EC2
	

Create an EC2 instance that will execute with high privileges

Lambda Create and Invoke
	

Create a lambda function that will execute with high privileges and invoke it

Lambda Create and Add Permission
	

Create a lambda function that will execute with high privileges and grant permission to invoke it to a user or a service

Lambda triggered with an external event
	

Create a lambda function that will execute with high privileges and link it to an external event

CloudFormation
	

Create a CloudFormation stack that will execute with high privileges

Data Pipeline
	

Create a Pipeline that will execute with high privileges

Glue Development Endpoint
	

Create a Glue Development Endpoint that will execute with high privileges

Update Glue Dev Endpoint
	

Update the associated SSH key for the Glue endpoint

Update Lambda code
	

Update the code of a lambda function executing with high privileges

The general recommendation to protect against privilege escalation is to restrict the resources that are granted sensitive permissions to. The first example above is a good demonstration of sensitive permissions being used with a narrow scope of resources and where no privilege escalation is possible.
Noncompliant Code Example

This policy allows to update the code of any lambda function. Updating the code of a lambda executing with high privileges will lead to privilege escalation.

resource "aws_iam_policy" "lambdaUpdatePolicy" {
  name = "lambdaUpdatePolicy"
  policy =<<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "lambda:UpdateFunctionCode"
            ],
            "Resource": "*"
        }
    ]
}
EOF
}

Compliant Solution

Narrow the policy to only allow to update the code of certain lambda functions.

resource "aws_iam_policy" "lambdaUpdatePolicy" {
  name = "lambdaUpdatePolicy"
  policy =<<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "lambda:UpdateFunctionCode"
            ],
            "Resource": "arn:aws:lambda:us-east-2:123456789012:function:my-function:1"
        }
    ]
}
EOF
}
-----------------------------------------------------------------------------------------
Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.

Note that this rule will raise issues on a == a and a != a expressions which are sometime used to detect NaN values. It is recommended to use instead math.isnan or an equivalent function. This will improve code readability.
Noncompliant Code Example

if a == a: # Noncompliant
    work()

if  a != a: # Noncompliant
    work()

if  a == b and a == b: # Noncompliant
    work()

if a == b or a == b: # Noncompliant
    work()

j = 5 / 5 # Noncompliant
k = 5 - 5 # Noncompliant

Exceptions

The following are ignored:

    The expression 1 << 1

See

    S1656 - Implements a check on =
    -------------------------------------------------------------------------------------
    Merging collapsible if statements increases the code’s readability.
Noncompliant Code Example

if condition1:
    if condition2:
        # ...

Compliant Solution

if condition1 and condition2:
    # ...
